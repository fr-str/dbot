// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: backup-queries.sql

package backup

import (
	"context"
	"time"
)

const getArtefact = `-- name: GetArtefact :one
SELECT origin_url, path, media_type, hash, created_at FROM artefacts WHERE origin_url = ?1
`

func (q *Queries) GetArtefact(ctx context.Context, originUrl string) (Artefact, error) {
	row := q.db.QueryRowContext(ctx, getArtefact, originUrl)
	var i Artefact
	err := row.Scan(
		&i.OriginUrl,
		&i.Path,
		&i.MediaType,
		&i.Hash,
		&i.CreatedAt,
	)
	return i, err
}

const insertArtefact = `-- name: InsertArtefact :exec
INSERT INTO artefacts (origin_url,path, media_type, hash, created_at)
VALUES (?1,?2, ?3, ?4, ?5)
`

type InsertArtefactParams struct {
	OriginUrl string
	Path      string
	MediaType string
	Hash      string
	CreatedAt time.Time
}

func (q *Queries) InsertArtefact(ctx context.Context, arg InsertArtefactParams) error {
	_, err := q.db.ExecContext(ctx, insertArtefact,
		arg.OriginUrl,
		arg.Path,
		arg.MediaType,
		arg.Hash,
		arg.CreatedAt,
	)
	return err
}

const insertBackup = `-- name: InsertBackup :exec
INSERT INTO msg_backup (msg_id, channel_id,author_id, content, attachments, created_at)
VALUES (?1, ?2,?3,  ?4, ?5, ?6)
`

type InsertBackupParams struct {
	MsgID       int64
	ChannelID   int64
	AuthorID    int64
	Content     string
	Attachments string
	CreatedAt   time.Time
}

func (q *Queries) InsertBackup(ctx context.Context, arg InsertBackupParams) error {
	_, err := q.db.ExecContext(ctx, insertBackup,
		arg.MsgID,
		arg.ChannelID,
		arg.AuthorID,
		arg.Content,
		arg.Attachments,
		arg.CreatedAt,
	)
	return err
}

const updateBackupMsg = `-- name: UpdateBackupMsg :exec
UPDATE msg_backup SET content = ?1
WHERE msg_id = ?2
`

type UpdateBackupMsgParams struct {
	Content string
	MsgID   int64
}

func (q *Queries) UpdateBackupMsg(ctx context.Context, arg UpdateBackupMsgParams) error {
	_, err := q.db.ExecContext(ctx, updateBackupMsg, arg.Content, arg.MsgID)
	return err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (discord_id, username)
VALUES (?1, ?2)
ON CONFLICT (discord_id) DO UPDATE SET
    username = excluded.username
RETURNING discord_id, username
`

type UpsertUserParams struct {
	DiscordID int64
	Username  string
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, upsertUser, arg.DiscordID, arg.Username)
	var i User
	err := row.Scan(&i.DiscordID, &i.Username)
	return i, err
}

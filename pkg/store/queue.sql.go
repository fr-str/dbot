// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queue.sql

package store

import (
	"context"
	"database/sql"
)

const enqueue = `-- name: Enqueue :one
INSERT INTO queue (meta,fail_count,last_msg,status,job_type)
VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5
) RETURNING id, meta, fail_count, status, job_type, last_msg
`

type EnqueueParams struct {
	Meta      string
	FailCount int64
	LastMsg   sql.NullString
	Status    string
	JobType   string
}

func (q *Queries) Enqueue(ctx context.Context, arg EnqueueParams) (Queue, error) {
	row := q.db.QueryRowContext(ctx, enqueue,
		arg.Meta,
		arg.FailCount,
		arg.LastMsg,
		arg.Status,
		arg.JobType,
	)
	var i Queue
	err := row.Scan(
		&i.ID,
		&i.Meta,
		&i.FailCount,
		&i.Status,
		&i.JobType,
		&i.LastMsg,
	)
	return i, err
}

const findFailedTasksInQueue = `-- name: FindFailedTasksInQueue :many
SELECT id, meta, fail_count, status, job_type, last_msg FROM queue
WHERE status != 'done' and fail_count = 5 order by id asc
`

func (q *Queries) FindFailedTasksInQueue(ctx context.Context) ([]Queue, error) {
	rows, err := q.db.QueryContext(ctx, findFailedTasksInQueue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Queue
	for rows.Next() {
		var i Queue
		if err := rows.Scan(
			&i.ID,
			&i.Meta,
			&i.FailCount,
			&i.Status,
			&i.JobType,
			&i.LastMsg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const nextInQueue = `-- name: NextInQueue :one
SELECT id, meta, fail_count, status, job_type, last_msg FROM queue
WHERE status != 'done' and fail_count < 5 order by id asc
`

func (q *Queries) NextInQueue(ctx context.Context) (Queue, error) {
	row := q.db.QueryRowContext(ctx, nextInQueue)
	var i Queue
	err := row.Scan(
		&i.ID,
		&i.Meta,
		&i.FailCount,
		&i.Status,
		&i.JobType,
		&i.LastMsg,
	)
	return i, err
}

const updateQueueEntry = `-- name: UpdateQueueEntry :exec
UPDATE queue SET
fail_count = ?1,
last_msg = ?2,
status = ?3
WHERE id = ?4
`

type UpdateQueueEntryParams struct {
	FailCount int64
	LastMsg   sql.NullString
	Status    string
	ID        int64
}

func (q *Queries) UpdateQueueEntry(ctx context.Context, arg UpdateQueueEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateQueueEntry,
		arg.FailCount,
		arg.LastMsg,
		arg.Status,
		arg.ID,
	)
	return err
}

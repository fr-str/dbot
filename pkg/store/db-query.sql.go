// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: db-query.sql

package store

import (
	"context"

	"dbot/pkg/db/types"
)

const addSound = `-- name: AddSound :one
INSERT INTO sounds (gid,url,aliases)
VALUES (?1,?2,?3)
RETURNING url, gid, aliases, created_at, updated_at, deleted_at
`

type AddSoundParams struct {
	Gid     string
	Url     string
	Aliases types.Aliases
}

func (q *Queries) AddSound(ctx context.Context, arg AddSoundParams) (Sound, error) {
	row := q.db.QueryRowContext(ctx, addSound, arg.Gid, arg.Url, arg.Aliases)
	var i Sound
	err := row.Scan(
		&i.Url,
		&i.Gid,
		&i.Aliases,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels
WHERE chid = ?
`

func (q *Queries) DeleteChannel(ctx context.Context, chid string) error {
	_, err := q.db.ExecContext(ctx, deleteChannel, chid)
	return err
}

const getChannel = `-- name: GetChannel :one
SELECT gid, chid, ch_name, type, created_at, updated_at, deleted_at FROM channels
WHERE gid = ? AND type = ? LIMIT 1
`

type GetChannelParams struct {
	Gid  string
	Type string
}

func (q *Queries) GetChannel(ctx context.Context, arg GetChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannel, arg.Gid, arg.Type)
	var i Channel
	err := row.Scan(
		&i.Gid,
		&i.Chid,
		&i.ChName,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const mapChannel = `-- name: MapChannel :one
INSERT INTO channels (gid,chid, ch_name, type)
VALUES (?1, ?2, ?3, ?4)
ON CONFLICT DO UPDATE SET
    chid = excluded.chid,
    ch_name = excluded.ch_name
RETURNING gid, chid, ch_name, type, created_at, updated_at, deleted_at
`

type MapChannelParams struct {
	Gid    string
	Chid   string
	ChName string
	Type   string
}

// upsert
func (q *Queries) MapChannel(ctx context.Context, arg MapChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, mapChannel,
		arg.Gid,
		arg.Chid,
		arg.ChName,
		arg.Type,
	)
	var i Channel
	err := row.Scan(
		&i.Gid,
		&i.Chid,
		&i.ChName,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const selectSounds = `-- name: SelectSounds :many
SELECT url, gid, aliases, created_at, updated_at, deleted_at FROM sounds
WHERE gid = ?
`

func (q *Queries) SelectSounds(ctx context.Context, gid string) ([]Sound, error) {
	rows, err := q.db.QueryContext(ctx, selectSounds, gid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sound
	for rows.Next() {
		var i Sound
		if err := rows.Scan(
			&i.Url,
			&i.Gid,
			&i.Aliases,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

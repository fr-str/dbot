// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query-audio-cache.sql

package cache

import (
	"context"
)

const getAudio = `-- name: GetAudio :one
SELECT gid, link, title, filepath FROM audiocache
WHERE gid = ? and link = ?
`

type GetAudioParams struct {
	Gid  string
	Link string
}

func (q *Queries) GetAudio(ctx context.Context, arg GetAudioParams) (Audiocache, error) {
	row := q.db.QueryRowContext(ctx, getAudio, arg.Gid, arg.Link)
	var i Audiocache
	err := row.Scan(
		&i.Gid,
		&i.Link,
		&i.Title,
		&i.Filepath,
	)
	return i, err
}

const setAudio = `-- name: SetAudio :exec
INSERT INTO audiocache (gid,link,filepath,title)
VALUES (?1,?2,?3,?4)
`

type SetAudioParams struct {
	Gid      string
	Link     string
	Filepath string
	Title    string
}

func (q *Queries) SetAudio(ctx context.Context, arg SetAudioParams) error {
	_, err := q.db.ExecContext(ctx, setAudio,
		arg.Gid,
		arg.Link,
		arg.Filepath,
		arg.Title,
	)
	return err
}
